import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import classification_report, accuracy_score
import matplotlib.pyplot as plt

# Load the datasets
test_data = pd.read_excel('C:/Users/Asus/Desktop/rama/test data filtering.xlsx')
train_test_split_data = pd.read_excel('C:/Users/Asus/Desktop/rama/Train and test data split filtering.xlsx')
train_data = pd.read_excel('C:/Users/Asus/Desktop/rama/Train data filtering.xlsx')


# Combine datasets
combined_data = pd.concat([train_data, test_data])

# Define features and target variable
features = combined_data.drop(['Row', 'fetal_health', 'Sort'], axis=1)
target = combined_data['fetal_health']

# Split the combined data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Naive Bayes
naive_bayes = GaussianNB()
naive_bayes.fit(X_train_scaled, y_train)
y_pred_naive_bayes = naive_bayes.predict(X_test_scaled)

# Evaluate the model
naive_bayes_accuracy = accuracy_score(y_test, y_pred_naive_bayes)
naive_bayes_report = classification_report(y_test, y_pred_naive_bayes)

print(f"Naive Bayes Accuracy: {naive_bayes_accuracy}")
print("Naive Bayes Classification Report:")
print(naive_bayes_report)

# Plotting the accuracy score
models = ['Naive Bayes']
accuracies = [naive_bayes_accuracy]

plt.figure(figsize=(10, 6))
plt.bar(models, accuracies, color=['red'])
plt.ylim(0, 1)
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Accuracy of Naive Bayes Model')
plt.show()